swagger: '2.0'
info:
  description: |
    NodeJsStudy Homework8 swagger
  version: 1.0.0
  title: Swagger Homework
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: localhost:3001
basePath: /api
tags:
- name: cities
  description: Cities information from HomeWork7
- name: user
  description: Information about users from HomeWork7
- name: product
  description: Information about products from HomeWork7
schemes:
  - http
paths:
  /cities:
    get:
      tags:
        - cities
      summary: Get list of all cities
      operationId: getAll
      produces:
        - application/json
      responses:
        200:
          description: List of all cities
          schema:
            $ref: '#/definitions/Cities'
          examples:
            application/json: [{"country":"Ukraine","capital":true,"_id":"5c97aa698ce78f2bd8a5be33","name":"Kiyv","location":{"lat":-7.2119433,"long":108.1591732}}]
        500: 
          description: Unable to get all cities
    post: 
      tags:
        - cities
      summary: Create new city
      operationId: create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
      - in: body
        name: body
        description: City object that needs to be added
        required: true
        schema:
          type: object
      responses:
        200:
          description: City successfully added
          schema:
            $ref: '#/definitions/City'
          examples:
            application/json: [{"country":"Ukraine","capital":true,"_id":"5c97aa698ce78f2bd8a5be33","name":"Kiyv","location":{"lat":-7.2119433,"long":108.1591732}}]
        500:
          description: "Error: fail to create City"
  /cities/{id}:
    put:
      tags:
      - cities
      summary: Update an existing city
      operationId: update
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: id
          description: City id to update
          required: true
          type: string
        - in: body
          name: body
          description: New city object
          required: true
          schema:
            type: object
      responses:
        200:
          description: "Success: City updated"
          schema:
            $ref: '#/definitions/City'
        500:
          description: "Error: fail to create City"
    delete:
      tags:
      - cities
      summary: Delete a city
      operationId: deleteCity
      produces:
        - application/json
      parameters:
      - name: id
        in: path
        description: "City id to delete"
        required: true
        type: string
      responses:
        200:
          description: "Success: City deleted"
        500:
          description: "Error: fail to find City"
  /cities/random: 
    get:
      tags:
      - cities
      summary: Get random city
      operationId: getRandom
      produces:
      - application/json
      responses:
        200:
          description: Random city
          schema:
            $ref: '#/definitions/City'
          examples:
            application/json: [{"country":"Ukraine","capital":true,"_id":"5c97aa698ce78f2bd8a5be33","name":"Kiyv","location":{"lat":-7.2119433,"long":108.1591732}}]
  /cities/init-city:
    get:
      tags:
      - cities
      summary: Create cities list form file
      operationId: init
      produces:
      - application/json
      responses:
        200:
          description: Create initial pull of cities
          schema:
            $ref: '#/definitions/Cities'
          examples:
            application/json: [{"country":"Ukraine","capital":true,"_id":"5c97aa698ce78f2bd8a5be33","name":"Kiyv","location":{"lat":-7.2119433,"long":108.1591732}}]
  /users/{id}:
    delete:
      tags:
      - users
      summary: Delete a user
      operationId: deleteUser
      produces:
        - application/json
      parameters:
      - name: id
        in: path
        description: "User id to delete"
        required: true
        type: string
      responses:
        200:
          description: "Success: User deleted"
        500:
          description: "Error: fail to find User"
  /users/init-user:
    get:
      tags:
      - users
      summary: Create users list form file
      operationId: initUser
      produces:
      - application/json
      responses:
        200:
          description: Create initial pull of users
          examples:
            application/json: [{ "hasCar": true,"_id": "5c97ad738ce78f2bd8a5be3a","firstName": "Serhii", "lastName": "Volkov","age": 18}]
          schema:
            $ref: '#/definitions/Users'
  /products:
    get: 
      tags:
      - products
      summary: Get all products
      operationId: getAllProducts
      produces:
        - application/json
      responses:
        200:
          description: List of all products
          schema:
            $ref: '#/definitions/Products'
          examples:
            application/json: [{"options":[{"color":"blue"},{"size":"XL"}],"_id":"5c97ad0e8ce78f2bd8a5be37","name":"Supreme T-Shirt","brand":"Supreme","price":99.99}]
        500: 
          description: Error in `getAllProducts` controller
      
  /products/{id}:
    delete:
      tags:
      - products
      summary: Delete a product
      operationId: deleteProduct
      produces:
        - application/json
      parameters:
      - name: id
        in: path
        description: "Product id to delete"
        required: true
        type: string
      responses:
        200:
          description: "Success: Product deleted"
        500:
          description: "Error: fail to find User"
  /products/init-product:
    get:
      tags:
      - products
      summary: Create users list form file
      operationId: initProduct
      produces:
      - application/json
      responses:
        200:
          description: Create initial pull of products
          schema:
            $ref: '#/definitions/Products'
          examples:
            application/json: [{"options":[{"color":"blue"},{"size":"XL"}],"_id":"5c97ad0e8ce78f2bd8a5be37","name":"Supreme T-Shirt","brand":"Supreme","price":99.99}]
definitions:
  User:
    type: object
    required:
    - _id
    - firstName
    - lastName
    properties:
      _id:
        type: string
        example: 5c97ad738ce78f2bd8a5be3a
      firstName:
        type: string
        example: Elon
      lastName:
        type: string
        example: Musk
      age:
        type: number
        example: 43
      hasCar:
        type: boolean
        example: true
  Users:
    type: array
    items:
      $ref: '#/definitions/User'
  City:
    type: object
    required:
    - _id
    - name
    properties:
      _id:
        type: string
        example: "5c97aa698ce78f2bd8a5be33"
      name:
        type: string
        example: Kiyv
      country:
        type: string
        example: "Ukraine"
      capital:
        type: boolean
        example: true
      location:
        type: object
        properties:
          lat:
            type: number
            example: -7.2119433
          long:
            type: number
            example: 108.1591732
      
  Cities:
    type: array
    items:
      $ref: '#/definitions/City'
  Product: 
    type: object
    required: 
    - _id
    - name
    properties:
      _id:
        type: string
        example: 5c97ad0e8ce78f2bd8a5be37
      name:
        type: string
        example: Supreme T-Shirt
      brand:
        type: string
        example: Supreme
      price: 
        type: number
        example: 99.99
      options: 
        type: object
        properties:
          color: 
            type: string
            example: blue
          size:
            type: string
            example: XL
  Products:
    type: array
    items:
      $ref: '#/definitions/Product'
# Added by API Auto Mocking Plugin
# host: virtserver.swaggerhub.com
# basePath: /SergeyUdovenko/swagger-hub-api/1.0.0
# schemes:
#  - https
#  - http